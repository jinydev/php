I"Xc<h2 id="웹-페이지">웹 페이지</h2>
<p>PHP는 초기 시작은 웹 사이트를 쉽게 개발할 수 있는 C 언어 스타일의 서버 사이드 스크립트입니다.</p>

<p>PHP는 다양 데이터를 처리하여 웹 사이트로 화면을 출력할 수 있습니다. 전 세계 수많은 웹 사이트는 이미 PHP로 개발, 운영되고 있습니다.</p>

<p><br /></p>
<hr />

<h3 id="191-페이지-출력">19.1 페이지 출력</h3>
<p>기존 웹 페이지는 HTML 마크업과 .htm 확장자를 가지고 있습니다. 또한 이러한 웹 페이지들을 웹 서버는 클라이언트 브라우저로 전달하고 화면을 출력하게 됩니다.</p>

<p>PHP는 HTML과 궁합이 잘 맞는 개발 언어 중 하나입니다. 기존 HTML 페이지 안 어디에서든지 &lt;?php ~~ ?&gt;를 삽입하게 되면 웹 서버가 PHP 코드를 인식하여 동적으로 처리합니다.</p>

<p>지금까지 배운 문법과 구조를 쉽게 기존 페이지에 적용할 수 있습니다.</p>

<p>예제 파일 web-01.php</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
	<span class="nt">&lt;head&gt;</span>
		
	<span class="nt">&lt;/head&gt;</span>
	<span class="nt">&lt;body&gt;</span>
		<span class="cp">&lt;?php</span>
			<span class="k">echo</span> <span class="s2">"hello world!"</span><span class="p">;</span>
		<span class="cp">?&gt;</span>
	<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>화면 출력)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<p>위 예제를 보면 웹 서버가 web-01.php html 페이지를 브라우저로 전송하기 전에 &lt;?php ~ ?&gt; 영역을 스크립트 처리하여 브라우저로 전송하게 됩니다.</p>

<p><br /></p>
<hr />

<h3 id="192-템플릿-작업">19.2 템플릿 작업</h3>
<p>PHP와 HTML이 혼용되어 있는 코드가 있는 반면 순수한 PHP 코드도 있습니다.</p>

<p>예전에는 HTML 페이지 안에 PHP코드를 삽입하여 개발하는 형태로 작업을 많이 했습니다. 하지만 HTML 안에 PHP 코드가 들어 있으면 가독성이 떨어지고 유지보수도 힘듭니다. 또한 디자이너와 협업하여 개발하기에도 어려운 부분이 있었습니다.</p>

<p>요즘 트렌드는 MVC 패턴이라고 해서 화면에 보이는 view 영역 (HTML)과 데이터와 연산을 처리하는 M/C(PHP)를 분리하여 작업하는 것을 선호합니다.</p>

<p>PHP와 HTML을 분리하여 가장 간단하게 웹 페이지를 표현하는 방법은 HTML을 템플릿화하여 처리하는 것입니다. 화면에 보이는 부분을 HTML 파일로 저장해 놓고, PHP에서 파일로 읽어 화면에 출력하는 것입니다.</p>

<p>예제 파일 web-02.php</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
	<span class="kd">class</span> <span class="nc">JinyFiles</span> <span class="p">{</span>
		<span class="k">public</span> <span class="k">function</span> <span class="n">fileLoad</span><span class="p">(</span><span class="nv">$filename</span><span class="p">)</span>
		<span class="p">{</span>
    		<span class="k">if</span> <span class="p">(</span><span class="nv">$fp</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="s2">"r"</span><span class="p">)){</span>
     			<span class="k">if</span> <span class="p">(</span><span class="nv">$fp</span><span class="p">){</span>
            		<span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nb">feof</span> <span class="p">(</span><span class="nv">$fp</span><span class="p">))</span> <span class="nv">$buffer</span> <span class="mf">.</span><span class="o">=</span> <span class="nb">fgets</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="mi">4096</span><span class="p">);</span>
            		<span class="nb">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
            		<span class="k">return</span> <span class="nv">$buffer</span><span class="p">;</span>
        		<span class="p">}</span>
      		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      			<span class="k">echo</span> <span class="s2">"파일을 읽어올 수 없습니다."</span><span class="p">;</span>
    		<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	
	<span class="nv">$temp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JinyFiles</span><span class="p">();</span>
	<span class="k">echo</span> <span class="nv">$temp</span><span class="o">-&gt;</span><span class="nf">fileLoad</span><span class="p">(</span><span class="s2">"./temp.htm"</span><span class="p">);</span>

<span class="cp">?&gt;</span>
</code></pre></div></div>

<p>예제 파일 temp.htm</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;html&gt;
	&lt;head&gt;
		
	&lt;/head&gt;
	&lt;body&gt;
		&lt;h1&gt;안녕하세요. jinyPHP입니다.&lt;/h1&gt;
	&lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<p>화면 출력)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<p>위의 예는 간단한 html 뷰와 코드를 분리한 예제입니다. 외부에 별도로 생성한 view용 html 파일을 읽어서 화면에 출력합니다. 이러한 방식을 통해 php 코드와 html 을 분리하여 관리합니다.</p>

<p><br /></p>
<hr />

<h3 id="193-코드-치환">19.3 코드 치환</h3>
<p>템플릿을 이용하여 HTML 파일 그대로 내용을 다시 재출력하는 것입니다.</p>

<p>하지만 이러한 방식의 문제는 동적인 데이터를 가지고 있는 HTML경우에는 데이터 처리가 어렵다는 것입니다. 그래서 이전에는 html 코드 안에 &lt;?php ~ ?&gt;를 삽입하여 코드를 처리했습니다.</p>

<p>템플릿에서 동적으로 처리하고자 하는 내용이 있다고 하면 치환 키워드를 만들어 사용합니다. 기존 html 파일에 특정한 키워드를 만들어 놓고, PHP에서 화면을 출력하기 전에 치환 키워드를 동적 데이터로 변경하는 방식입니다.</p>

<p>예제 파일 web-03.php</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?php
	class JinyFiles {
		public function fileLoad($filename)
		{
    		if ($fp = fopen($filename, "r")){
     			if ($fp){
            		while (!feof ($fp)) $buffer .= fgets($fp, 4096);
            		fclose($fp);
            		return $buffer;
        		}
      		} else {
      			echo "파일을 읽어올 수 없습니다.";
    		}
		}
	}
	
	$temp = new JinyFiles();
	$body = $temp-&gt;fileLoad("./temp-02.htm");

  // 치환 키워드를 변경합니다.
  $name = "jiny LEE";
  $body = str_replace("{(userName)}",$name,$body);

  echo $body;
?&gt;
</code></pre></div></div>

<p>예제 파일 temp-02.htm</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
	<span class="nt">&lt;head&gt;</span>
		
	<span class="nt">&lt;/head&gt;</span>
	<span class="nt">&lt;body&gt;</span>
		<span class="nt">&lt;h1&gt;</span>안녕하세요. 이름은 {(userName)} 입니다.<span class="nt">&lt;/h1&gt;</span>
	<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>화면 출력</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<p>위의 예제를 보면 템플릿 파일을 읽어서 변수에 저장합니다. 변수는 html 본문 코드를 담고 있습니다.</p>

<p>문자열을 치환하는 내부 함수를 통해 치환 키워드를 찾아서 데이터로 변경한 후 화면에 출력합니다.</p>

<p><code class="language-plaintext highlighter-rouge">str_replace()</code> 함수는 문자열의 일치되는 내용을 찾아서 다른 문자로 바꿔주는 함수입니다.</p>

<p>$body = str_replace(치환 문자, 대체 문자, $body);</p>

<p>가변적으로 처리해야 하는 내용은 템플릿에서 치환 문자로 넣어둡니다. PHP는 템플릿 파일을 읽은 후에 치환 문자를 실제적인 데이터로 변경 후 화면에 출력하면 가변적인 화면을 구현할 수 있습니다.</p>

<p><br /></p>
<hr />

<h3 id="194-폼-입력">19.4 폼 입력</h3>
<p>HTML의 &lt;form&gt; 태그는 브라우저를 통해 사용자 입력을 받아서 서버로 전송하는 기능을 합니다. 폼 요소는 HTML 에서 예전부터 사용을 해오던 클라이언트와 서버 간 통신 방법 중 하나입니다.</p>

<p>폼 태그를 사용하는 형식은 아래와 같습니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="nt">&gt;</span>
	폼 요소…
	<span class="nt">&lt;submit&gt;</span>
<span class="nt">&lt;/form&gt;</span> 
</code></pre></div></div>

<p>HTML에서 폼 요소들은 &lt;form&gt;&lt;/form&gt; 태그로 감싸져 있습니다. 또한, 폼 태그 안에는 폼 정보를 서버로 전송하는 버튼 역할의 <submit> 요소를 추가로 하나 더 가지고 있습니다. 서브밋(submit) 버튼을 클릭하면 폼의 데이터를 서버로 전송합니다.</submit></p>

<p>예제 파일 temp-03.htm</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
	<span class="nt">&lt;body&gt;</span>

		<span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"web-04.php"</span> <span class="na">method=</span><span class="s">"post"</span><span class="nt">&gt;</span>
			이름: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"name"</span><span class="nt">&gt;&lt;br&gt;</span>
			이메일: <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"email"</span><span class="nt">&gt;&lt;br&gt;</span>
			<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;/form&gt;</span>
		
	<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>화면 출력</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<p>위의 예처럼 temp-03.htm 파일은 폼 태그를 가지고 있는 웹 페이지입니다. 이름과 이메일을 입력받을 수 있는 입력 창과 전송 확인을 할 수 있는 서브밋 버튼을 하나 출력합니다.</p>

<p>폼 태그는 다양한 속성을 설정할 수 있습니다. 그 중에서 action이라는 설정 부분이 있습니다. action 속성은 폼 페이지에서 사용자가 전송 버튼을 클릭했을 때 서버 쪽에서 데이터를 받아 처리할 수 있는 스크립트의 URL입니다. action은 입력한 데이터를 전달하는 페이지 주소를 설정하는 속성입니다.</p>

<p>만일 action=”web-04.php” 형태로 설정했다면 클릭 시 web-04.php 파일로 데이터와 함께 페이지를 처리한다는 의미입니다.</p>

<p>그럼 데이터를 처리하는 web-04.php 파일의 내용을 확인해 보도록 하겠습니다.</p>

<p>예제 파일 web-04.php</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
	<span class="nt">&lt;body&gt;</span>
		안녕하세요 <span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s2">"name"</span><span class="p">];</span> <span class="cp">?&gt;</span><span class="nt">&lt;br&gt;</span>
		입력한 이메일 주소는 <span class="cp">&lt;?php</span> <span class="k">echo</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s2">"email"</span><span class="p">];</span> <span class="cp">?&gt;</span>
	<span class="nt">&lt;body&gt;</span>
<span class="nt">&lt;html&gt;</span>
</code></pre></div></div>

<p>화면 출력</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<p>위의 폼 요소를 가지고 있는 페이지에서 간단한 정보를 input 태그 입력창에 데이터를 입력한 후 전송(submit)을 클릭하면 web-04.php 파일로 url이 함께 이동합니다. 브라우저 상단 주소란에 보면 URL 주소가 변경되는 것을 확인할 수 있습니다.</p>

<p>폼 서브밋으로 페이지를 이동할 경우에는 url 변경과 같이 이전 페이지 form 요소의 데이터 또한 함께 전송합니다. 전송된 데이터의 타입 POST, GET 방식을 체크하여 폼 요소의 데이터를 읽어 올 수 있습니다. 입력한 데이터가 함께 전달된 데이터를 읽어서 화면에 출력이 가능합니다.</p>

<p><br /></p>
<hr />

<h3 id="195-폼-데이터">19.5 폼 데이터</h3>
<p>HTML 폼에서 전송 클릭을 하면 입력한 데이터가 서버로 전송됩니다. 보통 웹 페이지에서 서버로 데이터를 전송하는 방법은 크게 두 가지가 있습니다. GET 방식과 POST 방식입니다. 폼(form) 태그에서는 데이터를 전송하는 방식을 사용자가 직접 속성값을 통해 지정할 수 있습니다.</p>

<p>method=”post” 또는 method=”get”</p>

<p>형태로 적어 주시면 됩니다. 지정한 전송 방식 POST 또는 GET으로 설정할 수 있습니다.</p>

<p><br /></p>
<hr />

<h3 id="1951-get">19.5.1 GET</h3>
<p>GET 방식의 전송은url 페이지에서 데이터를 조회하는 용도로 많이 사용합니다. GET방식은 데이터를 전송 시에 URL 쿼리스트링 방식으로 전달하는 것을 말합니다. 즉 데이터가 URL 주소 형태로 변경되어 데이터를 전달합니다.</p>

<p>예) jinyphp.com/test.php?name=hojin&amp;country=korea</p>

<p>실행 스크립트 뒤에 <code class="language-plaintext highlighter-rouge">?</code> 기호를 추가하여 데이터의 유무를 확인합니다. 이름=값 형태의 한 쌍의 데이터로 이루어지며, 여러 데이터가 있을 경우에는 &amp; 문자로 연결합니다.</p>

<p>이처럼 URL로 표현되는 GET 방식의 데이터 전송은 누구나 알 수 있는 데이터 표현식입니다. URL주소만 보면은 사용자가 입력한 데이터가 무엇인지, 데이터 변수는 어떻게 되는지 직관적으로 확인할 수 있습니다. 이러한 점 때문에 GET 방식은 중요하지 않은 데이터를 전송할 경우에 많이 사용합니다. 주로 데이터를 조회하는 데 필요한 필터링 정보만 전달합니다. 만일, 중요한 개인정보와 같은 데이터일 경우 GET 방식으로 전송하면 안 됩니다.</p>

<p>GET 방식은 2천여 개의 문자들로 데이터를 전송하기에 충분한 데이터 양이 아닙니다. 하지만 GET 방식은 데이터가 URL로 표시되기 때문에 페이지의 북마크나 공개 되도 되는 데이터 값을 호출할 때 유용합니다.</p>

<p><br /></p>
<hr />

<h3 id="1952-post">19.5.2 POST</h3>
<p>POST는 GET과 달리 전송되는 데이터 양의 제한이 없습니다. 또한 비공개적으로 데이터를 전달하기 때문에 GET 방식보다 좀 더 안전합니다. POST 방식은 URL에 데이터를 표시하지 않습니다.</p>

<p>하지만 URL 형태로 처리되지 않기 때문에 폼을 서브 및 처리를 후에 history back 과 같은 처리 시 북마크가 정상적으로 동작하지 않을 수 있습니다.</p>

<p>또한 POST는 대량의 데이터를 처리할 수 있는 점을 이용하여 바이너리 같은 파일도 전송이 가능합니다. 특히 서버에 파일을 업로드할 수 있는 멀티 파트 바이너리와 같은 고급 기능을 지원합니다. 파일 업로드 기능을 사용할 때는 POST 방식으로 이용해야 합니다.</p>

<p><br /></p>
<hr />

<h3 id="1953-글로벌-변수">19.5.3 글로벌 변수</h3>
<p>PHP언어는 HTML폼 요소로 전달되는 데이터를 쉽게 처리 할 수 있는 글로벌 슈퍼변수를 제공합니다. 글로벌 슈퍼변수를 이용하면 쉽게 전달되는 데이터를 접근하고 읽어 올 수 있습니다.</p>

<p>GET으로 전송할 경우에는 슈퍼변수 $_GET 배열 사용이 가능합니다. 또한 POST로 전송할 경우에는 슈퍼변수 $_POST 배열 사용이 가능합니다.</p>

<p><br /></p>
<hr />

<h3 id="1954-request">19.5.4 REQUEST</h3>
<p>폼의 데이터가 전달될 때 POST로 전달된 것인지 GET 방식으로 전달된 것인지 확인이 필요합니다. 전달 방식에 따라서 $_GET과  $_POST를 구별해야 하기 때문입니다.</p>

<p>$_SERVER[“REQUEST_METHOD”] 글로벌 변수는 폼의 전송 method 속성 값을 확인할 수 있습니다.</p>

<p>예제 파일 web-05.php</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;html&gt;
	&lt;body&gt;

		&lt;form method="post" action="&lt;?php echo $_SERVER['PHP_SELF'];?&gt;"&gt;
 
 			이름: &lt;input type="text" name="username"&gt;
 			&lt;input type="submit"&gt;
		&lt;/form&gt;

		&lt;?php
			
			if ($_SERVER["REQUEST_METHOD"] == "POST") {
    				// input 필드의 데이터를 가지고 옵니다.
    				$name = $_POST['username'];
    				if (empty($name)) {
    					echo "이름이 입력되지 않았습니다";
    				} else {
       					echo $name;
    				}
			}
		?&gt;

	&lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<p>화면 출력)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div>

<p>위의 예제는 폼의 처리 데이터 유형이 POST인지를 확인하고 POST 값을 읽어와 처리합니다.</p>

<h3 id="196-_get">19.6 $_GET</h3>
<p>$_GET은 PHP의 글로벌 슈퍼변수로 웹 개발 시 URL로 주어지는 폼의 데이터 값을 쉽게 글로벌 변수를 통해 받아 올 수 있는 특수 변수입니다.</p>

<p>브라우저에서 URL 입력 시 아래의 도메인 주소와 같이 ?와 &amp; 기호를 함께 사용한 것을 본 적이 있을 것입니다. 통상적으로 html 페이지를 URL로 호출할 때 임의의 데이터를 같이 포함하여 전달할 수 있는데, 이렇게 전달되는 변수들을 GET 방식의 데이터 전달이라고 합니다.</p>

<p>http://www.jinyphp.com/list.php?board=notice&amp;uid=1</p>

<p>위의 URL 주소를 보면 list.php 파일명 뒤에 ? 기호를 만나면 ? 뒤의 문자열은 GET 형태의 데이터를 전달한다는 의미입니다.</p>

<p><code class="language-plaintext highlighter-rouge">?</code> 뒤의 문자열을 다시 정리해 보면,</p>

<p>boad=notice&amp;uid=1</p>

<p>변수명 = 값 &amp; 변수명 = 값 &amp; 변수명 = 값</p>

<p>변수명과 데이터는 <code class="language-plaintext highlighter-rouge">=</code>로 연결되어 한 세트로 설정되며, 여러 변수를 연결할 때는 &amp;로 연결할 수 있습니다.</p>

<p>즉, <code class="language-plaintext highlighter-rouge">&amp;</code>가 많을수록 전달되는 변수들이 많다고 보면 됩니다.</p>

<p>이렇게 URL을 이용하여 전송된 GET 방식의 데이터는 PHP의 슈퍼 글로벌 변수 $_GET 변수명으로 데이터를 가지고 올 수 있습니다.
$_GET은 어레이 변수로 뒤에 [‘변수명’] url로 입력된 변수명을 입력하면 됩니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://www.jinyphp.com/list.php?board=notice&amp;uid=1 으로 접속하면  

$_GET['board'] =&gt; "notice" 값을 읽어올 수 있습니다.  
$_GET['uid'] =&gt; "1" 값을 읽어올 수 있습니다.  
</code></pre></div></div>

<p>PHP로 웹 페이지를 개발할 때 GET 방식의 데이터 전달은 아주 많이 사용하는 방법이고, 쉽게 PHP에 데이터를 전달할 수 있습니다.</p>

<p>페이지 만들어 보겠습니다.<br />
예제파일: list.php</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;html&gt;
		&lt;body&gt;
		게시판 목록을 출력합니다.
		&lt;?php
			echo "게시판 코드 = " . $_GET['notice'] . "&lt;br&gt;";
			echo "게시판 번호 = " . $_GET['uid'] . "&lt;br&gt;";
		?&gt;

		&lt;/body&gt;
	&lt;/html&gt;
</code></pre></div></div>

<p>위의 예제를 실행하면 입력된 GET 값을 출력할 수 있습니다.</p>

<p>웹 페이지에서 GET 방식의 데이터 전송은 URL 방식 이외 form 태그의 method=”get” 설정으로 데이터를 전달할 수 있습니다.</p>

<blockquote>
  <p>note: 외부로 전달받은 입력값을 그대로 화면에 출력을 하는 경우 보안상 문제점이 있습니다. 악의적인 입력조작과 출력을 방지하기 위해서는 <code class="language-plaintext highlighter-rouge">htmlspecialchars()</code>와 같은 함수를 통하여 필터링 해주는 것을 권장합니다.</p>
</blockquote>

<blockquote>
  <p>get방식의 url을 사용하면, 입력되는 데이터 값을 고정할 수 있습니다. 즐겨 찾기 등과 같이 저장이 가능합니다.</p>
</blockquote>

<p><br /></p>

<h2 id="197-_post">19.7 $_POST</h2>
<p>$_POST는 PHP의 글로벌 변수로 웹 개발 시 가장 많이 사용하는 변수입니다. $_POST는 HTML에서 데이터를 전달하는 방식으로 form  에서 method=”post”로 설정한 후에 submit  을 통해 전달되는 데이터를 받을 수 있습니다.</p>

<p>GET 방식의 데이터 전달 방식은 URL에 자신이 전송하고자 하는 변수명과 데이터 값이 함께 표기되어 보안적인 면에서 취약점이 노출됩니다.</p>

<blockquote>
  <p>note: post방식을 이용하여 데이터를 전달하면, 입력한 정보가 눈에 보이지 않고 서버로 전달 할 수 있습니다.</p>
</blockquote>

<p>이런 점을 보완하고자 대부분의 웹 페이지에서 데이터를 전송할 때 POST 방식을 주로 이용합니다. 로그인 페이지, 회원가입 등 민감한 데이터일수록 POST 방식을 선호합니다.</p>

<p>PHP에서 POST 방식의 데이터는 PHP의 슈퍼 글로벌 변수 $_POST 변수명으로 데이터를 가져올 수 있습니다.</p>

<p>$_POST는 어레이 변수로 뒤에 [‘변수명’]으로 form에서 정의된 이름을 변수명으로 입력하면 됩니다.</p>

<p>예를 들면, 폼문에서 <code class="language-plaintext highlighter-rouge">&lt;input type=text name=username &gt;</code> 형태로 이름을 지정한 후 submit하면 PHP에서는 <code class="language-plaintext highlighter-rouge">$_POST['username']</code> 형태로 form의 입력된 데이터 값을 읽어올 수 있습니다.</p>

<p>$_POST 글로벌 변수는 어레이 변수로 여러 개의 폼의 데이터를 담아서 한 번에 전달할 수 있습니다.</p>

<p>폼 입력 예제 write.php</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;html&gt;
		&lt;body&gt;

		&lt;form method="post" action="&lt;?php echo $_SERVER['PHP_SELF'];?&gt;"&gt;
 
 			Name: &lt;input type="text" name="username"&gt;
 			&lt;input type="submit"&gt;
		&lt;/form&gt;

		&lt;?php
			if ($_SERVER["REQUEST_METHOD"] == "POST") {
    			// input 필드의 데이터를 가지고 옵니다.
    			$name = $_POST['username'];
    			if (empty($name)) {
    				echo "이름이 입력되지 않았습니다";
    			} else {
       				echo $name;
    			}
			}
		?&gt;

	&lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<p>위의 write.php 예제를 실행하면 이름이 username으로 설정된 input 값을 submit한 경우에 입력된 값을 출력합니다.</p>

<p>form method=”post” 폼의 메서드를 POST로 설정합니다. 그리고 submit할 때 실행할 페이지 동작 action=을 직접 write.php로 써 줄 수도 있지만 PHP의 슈퍼 글로벌 변수 $_SERVER[‘PHP_SELF’]를 참조하여 현재의 자기 자신의 페이지로 설정합니다.</p>

<p>action 값을 직접 입력하는 방식 이외에 $_SERVER[‘PHP_SELF’]를 사용하면 싱글 페이지 제작 시 별도로 매번 수정하지 않아도 자기 자신을 호출하기 때문에 편리합니다.</p>

<p>$_SERVER[“REQUEST_METHOD”] 는 form 입력 시 METHOD 값을 확인할 수 있는 변수입니다. 만일 METHOD가 POST일 때 username input 값을 읽어옵니다. 읽어온 값을 확인해서 내용이 있으면 echo문을 이용하여 화면에 출력하고, 내용이 없는 경우는 “이름이 입력되지 않았습니다”를 표시합니다.</p>

<p><br /><br /></p>
:ET