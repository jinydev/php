I"4:<h1 id="오토로딩">오토로딩</h1>
<hr />
<p>PHP는 소스파일을 나누어 작성할 수 있습니다. 분리된 파일은 include / require 와 같은 전처리 명령을 통하여 소스를 삽입 결합 할 수 있습니다.</p>

<p>소스의 파일을 분리하여 작성을 하는 방법들은 소스코드들을 간결화 하고, 기능별로 코드들을 분리할 수 있기 때문입니다. 비슷하게 분리된 파일들은 유지보수 및 재사용을 하는데 있어서 매우 유용합니다.</p>

<p>분리된 파일들은 동작하는데 있어서 상호 의존관계가 발생됩니다. 예로, aaa.php 파일을 실행하는데 필요한 함수가 bbb.php 에 있다면, 두개 파일은 서로 의존하게 됩니다. 만일 aaa.php 파일이 의존관계에 있는 bbb.php 파일을 include하지 않으면 의존성 실패로 스크립트 파일은 오류를 발생합니다.</p>

<p>파일을 분리하는 것은 의존성만 잘 관리를 한다면, 매우 유용한 소스관리 방법입니다. 하지만, 너무 많은 파일로 소스가 분리되어 있을 경우 모든 의존성을 체크하여 처리하는 것은 힘이 듭니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="k">include</span> <span class="p">(</span><span class="s1">'파일...'</span><span class="p">);</span>
<span class="k">include</span> <span class="p">(</span><span class="s1">'파일...'</span><span class="p">);</span>
<span class="k">include</span> <span class="p">(</span><span class="s1">'파일...'</span><span class="p">);</span>
<span class="err">…</span><span class="o">.</span>
<span class="err">…</span><span class="o">.</span>
<span class="k">include</span> <span class="p">(</span><span class="s1">'파일...'</span><span class="p">);</span>
<span class="k">include</span> <span class="p">(</span><span class="s1">'파일...'</span><span class="p">);</span>
</code></pre></div></div>

<p>소스 상단에 많은 include 문을 포함할 것입니다. 이러한 복잡한 의존관계를 쉽게 해결하기 위해서 PHP는 오토로드 라는 기능을 적용하였습니다. 오토로드는 PHP에서 의존성이 있는 소스를 실행할 때 먼저 실행되어 소스결합을 처리를 하게 됩니다.</p>

<p><br /></p>

<h3 id="201-클래스-의존성">20.1 클래스 의존성</h3>
<hr />

<p>클래스는 인스턴스를 생성하거나 정적으로 클래스를 사용하기 전에 반드시 클래스가 정의 되어 있어야 합니다. 또한, 클래스를 상속을 받을 때에도 상속되는 부모의 클래스는 반드시 사용전에 정의가 되어 있어야 합니다.</p>

<p>이처럼 PHP가 클래스를 사용하기 전에 연관된 클래스의 관계를 클래스 의존성이라고 합니다. 프로그램의 커지고 클래스의 관계가 복잡할 수록 클래스의 의존성을 확인하는 것은 매우 중요합니다.</p>

<p>Bascic.class.php 파일에</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
	<span class="kd">class</span> <span class="nc">basic</span> <span class="p">{</span>
		<span class="k">function</span> <span class="nf">show</span> <span class="p">(){</span>
			<span class="k">return</span> <span class="err">“</span><span class="nx">클래스입니다</span><span class="o">.</span><span class="err">”</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>

<p>클래스를 생성한 후에</p>

<p>Test.php</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
	<span class="c1">// 클래스파일을 삽입합니다.</span>
	<span class="k">include</span> <span class="err">“</span><span class="nx">basic</span><span class="o">.</span><span class="k">class</span><span class="o">.</span><span class="nx">php</span><span class="err">”</span><span class="p">;</span>
	
	<span class="nv">$basic</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">basic</span><span class="p">;</span>
	
	<span class="k">echo</span> <span class="nv">$basic</span><span class="o">-&gt;</span><span class="na">show</span><span class="p">();</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>
<p>파일에서 사전에 클래스 파일을 삽입을 합니다.</p>

<p><br /></p>

<h3 id="202-클래스-의존성-체크-함수">20.2 클래스 의존성 체크 함수</h3>
<hr />

<p>기존에는 클래스를 사용을 하면 모든 클래스 파일을 미리 사전에 inlcude 또는 require 하여 파일을 삽입을 하였습니다. 하지만, 작성한 모든 클래스들이 하나에 파일에 다 사용이 되지는 않습니다.</p>

<p>PHP는 클래스의 인스턴스를 선언하거나 정적호출시 클래스의 의존성을 사전에 검사할 수 있는 함수를 제공합니다. 클래스 의존성을 체크할 수 있는 함수를 통하여 필요한 클래스 파일을 실시간으로 inlcude 또는 require 함으로서 메모리를 관리하고, 복잡한 의존성 관계를 쉽게 처리할 수 있습니다.</p>

<p>이렇게 클래스 파일을 자동으로 확인해서 처리하는 기능을 오토로드 기능이라고 합니다.</p>

<p><br /></p>

<h3 id="203-클래스-파일-삽입">20.3 클래스 파일 삽입</h3>
<hr />

<p>Php5로 버전업이 되면서 php가 클래스 또는 인터페이스를 호출할 때, 자동으로 실행되는 함수가 있습니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
	<span class="k">function</span> <span class="nf">__autoload</span><span class="p">(</span><span class="nv">$className</span><span class="p">){</span>
		<span class="k">include</span> <span class="nv">$className</span><span class="o">.</span><span class="err">”</span><span class="o">.</span><span class="k">class</span><span class="o">.</span><span class="nx">php</span><span class="err">”</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="nv">$basic</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Basic</span><span class="p">;</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>

<p>__autoload() 함수는 위의 예처럼 new basic 형태로 클래스를 선언할 때, __autoload함수가 실행되고, 클래스 이름이 __autoload의 $className 으로 인자로 전달하게 됩니다. __autoload 함수는 전달된 클래스명 인자를 이용하여 클래스 파일을 include하여 정상적으로 클래스가 선언이 되도록 합니다.</p>

<p>프로젝트가 커질수록 클래스를 관리하고, 무결성을 유지하면서 클래스파일을 include 하기란 쉽지 않습니다. 이런 자동 로딩기능을 이용하면, 클래스 기반으로 코딩하는데 매우 편리할 것입니다.</p>

<p>PHP 5.1.2 로 업그레이드 되면서 기존 __autoload 는 spl_autoload_registrer()함수를 이용하여 보다 더 유연하게 오토로드 처리를 하실 수 있게 되었습니다.</p>

<p>최근에는 spl_autoload_register() 함수를 더 많이 쓰는 것 같습니다. spl_autoload_register() 함수는 기존 __autoload 함수 사용법이 같습니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">function</span> <span class="nf">spl_autoload_register</span><span class="p">(</span><span class="nv">$className</span><span class="p">){</span>
	<span class="k">include</span> <span class="nv">$className</span><span class="o">.</span><span class="err">”</span><span class="o">.</span><span class="k">class</span><span class="o">.</span><span class="nx">php</span><span class="err">”</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>형대로 동일하게 사용을 하면 됩니다.</p>

<p>오토로드 기능을 매번 파일 상단에 선언해서 사용하기란 불편합니다. 또한 오토로드 코드들이 각각의 파일마다 중복이 될 것입니다. 이런경우,  autoload.php 형태로 별도의 오토로드 처리 파일을 만들어서 사용을 하시면 편리합니다.</p>

<p>autoload.php 파일 생성</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?</span>
	<span class="c1">// 오토로드 처리흘 위한 파일</span>

	<span class="c1">// 클래스 파일을 구분하기 위한 사용자 정의 확장자를 사용하시면 , php 실행파일과 클래스파일 을 좀 더 쉽게 구분을 할 수 있습니다.</span>
	<span class="nv">$classExt</span> <span class="o">=</span> <span class="s2">".class.php"</span><span class="p">;</span> 

	<span class="c1">// 클래스를 호출하면 클래스명이 인자로 전달됩니다.</span>
	<span class="k">function</span> <span class="nf">spl_autoload_register</span><span class="p">(</span><span class="nv">$className</span><span class="p">){</span>
		<span class="nv">$classFilePath</span> <span class="o">=</span> <span class="k">__DIR__</span> <span class="o">.</span> <span class="s2">"/"</span> <span class="o">.</span> <span class="nv">$className</span> <span class="o">.</span> <span class="nv">$classExt</span><span class="p">;</span>

		<span class="c1">// 클래스 파일이 존재하는지 검사를 합니다.</span>
		<span class="c1">// 클래스 파일이 없는 상태에서 require 등을 통하여 삽입을 한다고 하면, 에러를 발생할 수 있습니다.</span>
		<span class="k">if</span><span class="p">(</span><span class="nb">is_readable</span><span class="p">(</span><span class="nv">$classFilePath</span><span class="p">)){</span>

			<span class="c1">// 클래스 파일을 불러옵니다.</span>
			<span class="k">require</span> <span class="nv">$classFilePath</span><span class="p">;</span>
		
		<span class="p">}</span>
		
	<span class="p">}</span>

<span class="cp">?&gt;</span>
</code></pre></div></div>

<p>이렇게 미리 만들어 놓은 클래스 오토로드 처리 파일을 프로그램작성시 먼저 한번 불러오고, 클래스를 선언을 하여 사용하면 자동으로 php가 선언되지 않은 클래스를 파일을 찾아 불러오고 사용을 할 수 있도록 처리를 해줍니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span> 
	<span class="c1">// 오토로드 처리를 위한 파일을 불러옵니다.</span>
	<span class="k">require</span> <span class="nx">autoload</span><span class="o">.</span><span class="nx">php</span><span class="p">;</span>

	<span class="c1">// 오토로드 파일을 통하여, jiny클래스가 정의된 클래스파일을 불러와 클래스를 오류없이 선언하여 사용을 할 수 있습니다.</span>
	<span class="nv">$jiny</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">jiny</span><span class="p">;</span>
<span class="cp">?&gt;</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="204-psr-4-autoloading">20.4 PSR-4 Autoloading</h3>
<hr />

<p>PHP Framework Interop Group(PHP-FIG)에서는 SPR-0 autoloading standard 를 제안하였습니다. 아래와 같은 규칙을 적용하여 오토로드를 처리하도록 권장하고 있습니다.</p>

<ul>
  <li>네임스페이스와 클래스명의 구조는 &lt;vender Name&gt;(<namespace>\)*<Classname> 형식을 따릅니다.</Classname></namespace></li>
  <li>네임스페이스는 서브 네임스페이스를 포함할 수 있습니다.</li>
  <li>네임스페이스 구분자는 파일을 불러오기 위한 디렉토리 구분자 입니다.</li>
  <li>클래스명에 포함된 _글자는 디텍토리 구분자로 사용된다.</li>
  <li>네임스페이스 와 클래스 파일을 불러올 때 .php 를 확장자로 불러 온다.</li>
  <li>벤더, 네임스페이스, 클래스 는 대소문자를 구분한다.</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
	<span class="k">function</span> <span class="nf">autoload</span><span class="p">(</span><span class="nv">$className</span><span class="p">)</span> <span class="p">{</span>
		
		<span class="nv">$className</span> <span class="o">=</span> <span class="nb">ltrim</span><span class="p">(</span><span class="nv">$className</span><span class="p">,</span> <span class="s1">'\\'</span><span class="p">);</span>
		<span class="nv">$fileName</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>
 		<span class="nv">$namespace</span> <span class="o">=</span> <span class="s1">''</span><span class="p">;</span>

		<span class="k">if</span> <span class="p">(</span><span class="nv">$lastNsPos</span> <span class="o">=</span> <span class="nb">strpos</span><span class="p">(</span><span class="nv">$className</span><span class="p">,</span> <span class="s1">'\\'</span><span class="p">))</span> <span class="p">{</span>
			<span class="nv">$namespace</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$className</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$lastNsPos</span><span class="p">);</span>
			<span class="nv">$className</span> <span class="o">=</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$className</span><span class="p">,</span> <span class="nv">$lastNsPos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
			<span class="nv">$fileName</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">'\\'</span><span class="p">,</span> <span class="nx">DIRECTORY_SEPARATOR</span><span class="p">,</span> <span class="nv">$namespace</span><span class="p">)</span> <span class="o">.</span> <span class="nx">DIRECTORY_SEPARATOR</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="nv">$fileName</span> <span class="o">.=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s1">'_'</span><span class="p">,</span> <span class="nx">DIRECTORY_SEPARATOR</span><span class="p">,</span> <span class="nv">$className</span><span class="p">)</span> <span class="o">.</span> <span class="s1">'.php'</span><span class="p">;</span>
		<span class="k">require</span> <span class="nv">$fileName</span><span class="p">;</span>
	<span class="p">}</span>

<span class="cp">?&gt;</span>
</code></pre></div></div>

<p><br /></p>

<ul>
  <li><a href="composer">컴포저</a></li>
</ul>
:ET