I"|l<h1 id="psr-php-standard-recommendation">PSR (PHP Standard Recommendation)</h1>
<p>PHP는 자유로운 스타일의 언어입니다. 또한 프로그램 소스 코드는 개발자 성향과 개발 방법에 따라서 코드 작성 표기가 자유롭습니다.</p>

<p>PHP는 오픈소스, 프레임워크 등 공개로 인하여 여러 개발자들이 소스를 공유하고, 함께 개발하고 있습니다. 또한 이러한 공유와 나눔으로 PHP는 많은 발전을 하고 있습니다.</p>

<p>PSR은 PHP Standard Recommendation의 약자로 PHP-FIG에서는 권장하는 PHP의 코드 스타일입니다. PHP-FIG에서 PSR이라는 코드 스타일을 권장하는 이유는 더 많은 사람들이 PHP 소스를 공유하고 함께 개발하기 위해서입니다.</p>

<p>공식 사이트 http://www.php-fig.org</p>

<p>PSR 권고안은 함께 만들어가는 권고안입니다. 지금도 새로운 아이디어가 제안되고 많은 개발자들의 의견을 받아들이고 있습니다. 이런 의견들은 초안 → 리뷰 → 수용 세 가지 상태로 구분됩니다.</p>

<p>PSR 권고안은 PSR + 번호 형태로 발표합니다. 현재 공식 사이트에서 수용된 권고안은 다음과 같습니다.</p>

<ul>
  <li>PSR-1: 기본 표준코딩</li>
  <li>PSR-2: 코딩 스타일</li>
  <li>PSR-3: 로거 인터페이스</li>
  <li>PSR-4: 오토로딩</li>
  <li>PSR-6: 캐시 인터페이스</li>
  <li>PSR-7: HTTP 메시지 인터페이스</li>
  <li>PSR-13: 하이퍼미디어 링크</li>
  <li>PSR-16: 간단한 캐시</li>
</ul>

<p>이외 리뷰 중인 제안과 다수의 초안 제안 등이 있습니다. 아직 수용되지 않은 초안과 리뷰 단계의 제안은 웹 사이트를 방문하면 확인할 수 있습니다.</p>

<p>PSR은 다수의 PHP 프레임워크에서 적용되고 있습니다. 또한 이 책에서도 PSR 코딩 스타일 규격을 따라서 학습자에게도 향후 PSR 스타일의 코딩과 소스 공유 시 이해가 쉽도록 설명하려고 합니다.</p>

<h3 id="41-psr-1-표준-코딩">4.1 PSR-1 표준 코딩</h3>
<p>PSR-1은 기본적인 PHP의 표준 코딩 가이드입니다. PHP 태그, 인코딩 및 이름 규칙 등을 서로 규약하여 호환성을 증대합니다.</p>

<h4 id="411-php-파일">4.1.1 PHP 파일</h4>
<p>시작 태그: PHP의 시작과 종료 태그입니다. PHP는 다양한 태그 약자가 존재합니다. PSR-1에서는 <?php ?> 와 <?= ?> 만 사용하기를 권고합니다.</p>

<p>인코딩: PHP 소스 텍스트 파일의 인코딩을 규약합니다. 보통 텍스트 에디터에는 다양한 문서 인코딩 방식을 지원하지만 PSR-1 에서는 문서 인코딩 포맷을 UTF-8로 사용할 것을 권고합니다.</p>

<p>UTF-8은 그냥 UTF-8 방식과 BOM(byte order Mark)이 적용된 두 가지 방식이 있습니다. PSR-1에서는 BOM이 적용되지 않은 그냥 UTF-8을 권고합니다.</p>

<h4 id="412-사이드-이펙트">4.1.2 사이드 이펙트</h4>
<p>코드를 작성할 때는 사이드 이펙트(side effect)가 적게 발생되도록 주의합니다. 사이드 이펙트는 다양한 곳에서 발생할 수 있습니다. 한 개의 PHP 파일 안에서도 클래스, 함수, 상수 등 새로운 심볼을 선언할 때, 또한 이것들이 다른 사이드 이펙트의 원인이 되어서는 안 됩니다.</p>

<p><code class="highlighter-rouge">사이드 이펙트</code>의 의미는 클래스, 함수, 상수를 직접적인 관련 없이 로직이 실행되는 것입니다. 사이드 이펙트 적용될 수도 있지만 그 사용을 구체적으로 제한하지는 않습니다(이를테면, 출력 발생, require 또는 include 사용, 외부 서비스 연결, ini 설정 변경, 방출 오류 또는 예외, 글로벌 또는 정적변수 변경, 파일을 읽거나 저장 등).</p>

<p>다음은 선언과 사이드 이펙트 관련된 파일의 예 입니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
	<span class="c1">// 사이드 이펙트: ini 설정을 변경</span>
	<span class="nb">ini_set</span><span class="p">(</span><span class="s1">'error_reporting'</span><span class="p">,</span> <span class="kc">E_ALL</span><span class="p">);</span>

	<span class="c1">// 사이드 이펙트: 파일I/O 등을 이용하여 파일을 읽음</span>
	<span class="k">include</span> <span class="s2">"file.php"</span><span class="p">;</span>

	<span class="c1">// 사이드 이펙트: 화면 I/O 로 출력을 발생</span>
	<span class="k">echo</span> <span class="s2">"&lt;html&gt;</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span>

	<span class="c1">// 선언</span>
	<span class="k">function</span> <span class="nf">foo</span><span class="p">()</span>
	<span class="p">{</span>
    	<span class="c1">// 함수 본문 내용...</span>
	<span class="p">}</span>
</code></pre></div></div>

<p>다음은 사이드 이펙트가 적게 발생하는 스타일입니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
	<span class="c1">// 선언</span>
	<span class="k">function</span> <span class="nf">foo</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="c1">// 함수 본문 내용...</span>
	<span class="p">}</span>

	<span class="c1">// conditional declaration is *not* a side effect</span>
	<span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nb">function_exists</span><span class="p">(</span><span class="s1">'bar'</span><span class="p">))</span> <span class="p">{</span>
		<span class="k">function</span> <span class="nf">bar</span><span class="p">()</span>
		<span class="p">{</span>
			<span class="c1">// 함수 본문 내용...</span>
		<span class="p">}</span>
	<span class="p">}</span>
</code></pre></div></div>

<h4 id="413-네임스페이스와-클래스">4.1.3 네임스페이스와 클래스</h4>
<p>네임스페이스와 클래스는 다음 장에서 설명하지만 네임스페이스와 클래스는 PSR 오토로딩 권장을 따라서 사용해야 합니다.</p>

<p>클래스는 PHP 파일 하나에 한 개씩 작성하는 것을 권장합니다. 또한 네임스페이스는 이름은 최소한 한 개 이상의 레벨로 작성합니다. 1개 이상을 사용해야 하는 이유는 최상의 레벨은 벤더 이름으로 사용하기 때문입니다.</p>

<p>PHP 5.3 이상에서는 네임스페이스를 사용하는 것을 적극 권장합니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="c1">// PHP 5.3 and later:</span>
<span class="kn">namespace</span> <span class="nn">Vendor\Model</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">Foo</span>
<span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>

<p>PHP 5.2 이전 버전에서는 <code class="highlighter-rouge">_</code>를 통해 벤더, 모델, 클래스명 등으로 구분할 것을 권장합니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="c1">// PHP 5.2.x and earlier:</span>
<span class="kd">class</span> <span class="nc">Vendor_Model_Foo</span>
<span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="414-클래스-상수-프로퍼티-및-매서드">4.1.4 클래스 상수, 프로퍼티 및 매서드</h4>
<p>클래스, 인터페이스, 트레이트 등의 이름을 작명할 때 다음과 같은 작명 방식을 권장합니다.</p>

<p>클래스명: 클래스 이름은 낙타 표기법(camel case)인 StudlyCaps 스타일로 작성합니다. 클래스 이름의 첫 글자는 대문자로 표기하는 타이틀 케이스 형태로 작성을 권고합니다.</p>

<p>예) StudyCaffe, JinyPhp</p>

<p>상수: 상수는 대문자와 밑줄 “_”로 구분하여 사용합니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="kn">namespace</span> <span class="nn">Vendor\Model</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">Foo</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="no">VERSION</span> <span class="o">=</span> <span class="s1">'1.0'</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">DATE_APPROVED</span> <span class="o">=</span> <span class="s1">'2012-06-01'</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>메서드: 메서드 이름은 낙타 표기법 으로 작성합니다. 메서드의 시작 문자는 소문자를 사용합니다.</p>

<p>예) camelCase (), loveStudy()</p>

<p>프로퍼티: 프로퍼티(변수)는 낙타 표기법(StudlyCaps, camelCase, under_score)을 구분하지는 않습니다. 코드상에서 일관성 있게 사용하면 됩니다.</p>

<h4 id="42-psr-2-코딩-스타일">4.2 PSR-2 코딩 스타일</h4>
<p>PSR-2는 PSR-1의 확장 규칙입니다. 또한 일관적인 코드 스타일과 관련된 권고안입니다.</p>

<p>PSR-2의 일관적인 코드 스타일은 여러 사람이 한 명이 작성한 것과 같이 보이는 효과를 주기 위함입니다. 여러 개발자와 공동 작업을 하거나 작성된 코드가 공개가 될 때 일관성은 매우 중요합니다.</p>

<h4 id="421-들여쓰기">4.2.1 들여쓰기</h4>
<p>들여쓰기는 코드의 가독성을 위해서 매우 중요한 코딩 스타일입니다. 들여쓰기는 에디터마다 적용하는 스타일이 다르고, 개발자들 사이에서도 공백 수, 탭 키 등 다양한 방식으로 들여쓰기를 합니다.</p>

<p>PSR-2에서는 일관된 들여쓰기를 위해서 tab 대신에 공백 문자 4개를 기본으로 들여쓰기를 합니다. 사용하는 에디터마다 tab 키의 크기는 각기 다를 수 있습니다. 미리 에디터 환경설정에서 tab의 크기를 지정해 놓으면 편리합니다.</p>

<h3 id="422-파일">4.2.2 파일</h3>
<p>PHP 파일은 각 줄의 끝에는 유닉스 개행 문자(Unix LF)를 사용해야 합니다. 또한 파일의 맨 마지막 줄에는 공백의 한 줄을 포함합니다.</p>

<p>그리고 PHP 파일의 종료 태그 ?&gt;를 생략합니다.?&gt;를 생각하게 되면 예상치 않은 출력 오류를 방지할 수도 있습니다.</p>

<h4 id="423-줄">4.2.3 줄</h4>
<p>한 줄에 수많은 코드를 작성한다면 코드의 줄이 너무 길어 읽기가 불편할 것입니다. 그래서 PSR-2에서는 각 줄의 길이를 80자 이내 작성을 권고합니다. 만일 80자를 넘더라도 최대 120자를 넘지 않도록 하고 있습니다.</p>

<p>또한 각 줄의 마지막에는 공백 문자가 들어가지 않도록 합니다.</p>

<h4 id="424-키워드">4.2.4 키워드</h4>
<p>PSR-2에서 PHP의 키워드는 소문자 사용을 권고합니다. 또한 상수도 true, false, null 등 소문자로 사용할 것을 권고합니다. 대문자로 TRUE, FALSE, NULL로 쓰고 있다면 PSR-2 스타일로 바꾸도록 합니다.</p>

<h4 id="425-네임스페이스">4.2.5 네임스페이스</h4>
<p>네임스페이스 키워드와 use 키워드 다음에는 비어 있는 한 줄을 추가합니다.
한 줄을 추가함으로써 문장을 쉽게 구분할 수 있고 가독성을 높입니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="kn">namespace</span> <span class="nn">Vendor\Package</span><span class="p">;</span>

<span class="kn">use</span> <span class="nn">FooClass</span><span class="p">;</span>
<span class="kn">use</span> <span class="nn">BarClass</span> <span class="k">as</span> <span class="n">Bar</span><span class="p">;</span>
<span class="kn">use</span> <span class="nn">OtherVendor\OtherPackage\BazClass</span><span class="p">;</span>

<span class="c1">// ... additional PHP code …</span>
</code></pre></div></div>

<h4 id="425-클래스">4.2.5 클래스</h4>
<p>클래스, 인터페이스, 트레이트도 이와 같은 스타일 코딩 권고를 따릅니다.</p>

<p>extends와 implements 키워드는 클래스명과 함께 한 줄에 위치해야 합니다. 그리고 본문을 감싸고 있는 중괄호 { 시작은 class 키워드와 같은 위치의 다음 줄에 위치합니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
	<span class="kn">namespace</span> <span class="nn">Vendor\Package</span><span class="p">;</span>

	<span class="kn">use</span> <span class="nn">FooClass</span><span class="p">;</span>
	<span class="kn">use</span> <span class="nn">BarClass</span> <span class="k">as</span> <span class="n">Bar</span><span class="p">;</span>
	<span class="kn">use</span> <span class="nn">OtherVendor\OtherPackage\BazClass</span><span class="p">;</span>

	<span class="kd">class</span> <span class="nc">ClassName</span> <span class="k">extends</span> <span class="nx">ParentClass</span> <span class="k">implements</span> <span class="nx">\ArrayAccess</span><span class="p">,</span> <span class="nx">\Countable</span>
	<span class="p">{</span>
		<span class="c1">// constants, properties, methods</span>
	<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>프로퍼티<br />
모든 프로퍼티는 접근 권한 속성을 앞에 선언해야 합니다. 접근 속성은 public, protected, private 세 가지가 있습니다. var와 같은 속성 키워드는 사용하지 않습니다.</li>
</ul>

<p>프로퍼티 이름은 밑줄 “_”과 같은 개인적인 접두사를 사용하지 않습니다. 또한 메서드 이름 다음은 공백 문자를 삽입하지 않습니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
	<span class="kn">namespace</span> <span class="nn">Vendor\Package</span><span class="p">;</span>

	<span class="kd">class</span> <span class="nc">ClassName</span>
	<span class="p">{</span>
		<span class="k">public</span> <span class="nv">$foo</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
	<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>매서드
모든 메서드는 접근 권한 속성을 앞에 선언해야 합니다. 접근 속성은 public, protected, private 세 가지가 있습니다.</li>
</ul>

<p>메서드 이름은 밑줄 “_”과 같은 개인적인 접두사를 사용하지 않습니다. 또한 메서드 이름 다음은 공백 문자를 삽입하지 안습니다.</p>

<p>메서드의 내용을 담고 있는 중괄호는 다음 줄 자신의 위치를 시작으로 그 다음 줄에 닫는 중괄호를 작성합니다. 여는 괄호 뒤에 공백이 있으면 안 되며 닫는 괄호 앞에 공백이 있어서는 안 됩니다.</p>

<p>메서드 선언은 다음과 같습니다. 괄호, 쉼표, 공백 및 중괄호의 배치에 유의합니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="kn">namespace</span> <span class="nn">Vendor\Package</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">ClassName</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">fooBarBaz</span><span class="p">(</span><span class="nv">$arg1</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$arg2</span><span class="p">,</span> <span class="nv">$arg3</span> <span class="o">=</span> <span class="p">[])</span>
    <span class="p">{</span>
        <span class="c1">// method body</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>메서드 인자
메서드 인자 뒤에는 공백이 들어가면 안 됩니다. 여러 개의 인자를 전달할 경우 인자명 뒤에 쉼표를 삽입을 하고 공백을 하나 추가합니다.</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="kn">namespace</span> <span class="nn">Vendor\Package</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">ClassName</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">foo</span><span class="p">(</span><span class="nv">$arg1</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$arg2</span><span class="p">,</span> <span class="nv">$arg3</span> <span class="o">=</span> <span class="p">[])</span>
    <span class="p">{</span>
        <span class="c1">// method body</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>만일 매개변수 인자가 많아서 여러 줄로 구성해야 할 때도 있습니다. 이런 경우에는 들여쓰기를 적용합니다.</p>

<p>매개변수는 한 줄에 하나씩만 작성합니다. 닫는 괄호와 여는 중괄호는 한 줄의 공백을 사용하여 각각의 줄에 함께 있어야 합니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="kn">namespace</span> <span class="nn">Vendor\Package</span><span class="p">;</span>

<span class="kd">class</span> <span class="nc">ClassName</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">aVeryLongMethodName</span><span class="p">(</span>
        <span class="nx">ClassTypeHint</span> <span class="nv">$arg1</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="nv">$arg2</span><span class="p">,</span>
        <span class="k">array</span> <span class="nv">$arg3</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// method body</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>abstract, final, static
abstract와 final 은 가시성 키워드 앞에 선언돼야 합니다. static은 가시성 키워드 다음에 선언해야 합니다.</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="kn">namespace</span> <span class="nn">Vendor\Package</span><span class="p">;</span>

<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">ClassName</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">static</span> <span class="nv">$foo</span><span class="p">;</span>

    <span class="k">abstract</span> <span class="k">protected</span> <span class="k">function</span> <span class="nf">zim</span><span class="p">();</span>

    <span class="k">final</span> <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">bar</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// method body</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>메서드와 함수의 호출
메서드와 함수를 호출할 때 이름 뒤 소괄호 시작 사이에는 공백이 없어야 합니다. 또한 소괄호 시작과 인수명 사이, 소괄호가 끝나는 앞에도 공백이 없어야 합니다.</li>
</ul>

<p>또한 여러 인수가 전달될 때 구분자 쉼표 앞에도 공백이 없어야 합니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="nx">bar</span><span class="p">();</span>
<span class="nv">$foo</span><span class="o">-&gt;</span><span class="na">bar</span><span class="p">(</span><span class="nv">$arg1</span><span class="p">);</span>
<span class="nx">Foo</span><span class="o">::</span><span class="na">bar</span><span class="p">(</span><span class="nv">$arg2</span><span class="p">,</span> <span class="nv">$arg3</span><span class="p">);</span>
</code></pre></div></div>

<p>인수가 여러 개일 때는 다음 줄에 시작하여 들여쓰기를 할 수 있습니다. 여러 줄로 인수를 작성할 때 첫 번째 항목은 다음 줄에 있어야 하며 한 줄에 하나의 인수만 있어야 합니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="nv">$foo</span><span class="o">-&gt;</span><span class="na">bar</span><span class="p">(</span>
    <span class="nv">$longArgument</span><span class="p">,</span>
    <span class="nv">$longerArgument</span><span class="p">,</span>
    <span class="nv">$muchLongerArgument</span>
<span class="p">);</span>
</code></pre></div></div>

<h3 id="426-제어-구조">4.2.6 제어 구조</h3>
<p>모든 제어 구조문 키워드 다음에는 하나의 공백을 포함합니다. if, elsif, else, switch, while, do wile, for, foreach, try, catch입니다.</p>

<p>제어문의 본문을 담는 중괄호는 앞뒤에 공백을 포함하지 않습니다. 또한 중괄호 안에는 들여쓰기를 권장합니다.</p>

<p>PSR-2 코딩 스타일: 조건문</p>

<p>다음은 PSR-2 권고의 코딩 스타일입니다. 괄호, 공백, 중괄호의 배치에 유의합니다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$expr1</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// if body</span>
<span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nv">$expr2</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// elseif body</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// else body;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>조건문의 거짓 조건 else if 처럼 두 개의 키워드 말고 else if처럼 하나의 단어로 공백 없이 붙여서 사용합니다.</p>

<p>PSR-2 코딩 스타일: 스위치, 케이스</p>

<p>다음은 PSR-2 권고의 코딩 스타일입니다. 괄호, 공백, 중괄호 배치에 유의합니다.</p>

<p>스위치의 케이스 문장은 들여쓰기를 적용합니다. 브레이크 키워드는 한 단계 더 들여쓰기합니다.</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="k">switch</span> <span class="p">(</span><span class="nv">$expr</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
        <span class="k">echo</span> <span class="s1">'First case, with a break'</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
        <span class="k">echo</span> <span class="s1">'Second case, which falls through'</span><span class="p">;</span>
        <span class="c1">// no break</span>
    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
    <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
    <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
        <span class="k">echo</span> <span class="s1">'Third case, return instead of break'</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="k">echo</span> <span class="s1">'Default case'</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>PSR-2 코딩 스타일: while<br />
다음은 PSR-2 권고의 코딩 스타일입니다. 괄호, 공백, 중괄호의 배치에 유의합니다.</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="k">while</span> <span class="p">(</span><span class="nv">$expr</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// structure body</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>PSR-2 코딩 스타일: do~while<br />
다음은 PSR-2 권고의 코딩 스타일입니다.  괄호, 공백 및 중괄호의 배치에 유의합니다.</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="k">do</span> <span class="p">{</span>
    <span class="c1">// structure body;</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="nv">$expr</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>PSR-2 코딩 스타일 : for<br />
다음은 PSR-2 권고의 코딩 스타일입니다. 괄호, 공백, 중괄호의 배치에 유의합니다.</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// for body</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>PSR-2 코딩 스타일: foreach<br />
다음은 PSR-2 권고의 코딩 스타일입니다. 괄호, 공백, 중괄호의 배치에 유의합니다.</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nv">$iterable</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// foreach body</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>PSR-2 코딩 스타일: try~catch<br />
다음은 PSR-2 권고의 코딩 스타일입니다. 괄호, 공백, 중괄호의 배치에 유의합니다.</li>
</ul>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="c1">// try body</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">FirstExceptionType</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// catch body</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">OtherExceptionType</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// catch body</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /><br /></p>
:ET